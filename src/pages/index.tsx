import { type NextPage } from "next";
import Head from "next/head";
import type { ChangeEvent, FormEvent } from "react";
import { useState } from "react";
import { trpc } from "../utils/trpc";

const Home: NextPage = () => {
  const [name, setName] = useState("");
  const [price, setPrice] = useState("1");
  const [category, setCategory] = useState("");
  const [description, setDescription] = useState("");
  const [imgsSrc, setImgsSrc] = useState<string[]>([]);
  const [showForm, setShowForm] = useState(false);
  const [loading, setLoading] = useState(false);

  const utils = trpc.useContext();
  const productAsset = trpc.productAsset.getAll.useQuery(undefined, {
    keepPreviousData: true,
  });
  const deleteItem = trpc.productAsset.delete.useMutation({
    onSettled() {
      utils.productAsset.getAll.invalidate();
    },
  });
  const create = trpc.productAsset.create.useMutation({
    onSettled() {
      utils.productAsset.getAll.invalidate();
      setLoading(false);
    },
  });

  function onChangeFile(e: ChangeEvent<HTMLInputElement>) {
    if (!e.target.files) return;
    for (const file of e?.target?.files) {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        setImgsSrc((imgs) => [...imgs, reader.result as string]);
      };
      reader.onerror = () => {
        console.log(reader.error);
      };
    }
  }

  function handleDelete(id: string) {
    setLoading(true);
    deleteItem.mutate({ id });
    setLoading(false);
  }

  async function handleSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setLoading(true);
    const data = {
      name,
      price: Number(price),
      category,
      description,
      files: imgsSrc,
    };
    create.mutate(data);
    reset();
  }

  function reset() {
    setName("");
    setCategory("");
    setPrice("");
    setDescription("");
    setImgsSrc([]);
    setLoading(false);
  }

  return (
    <>
      <Head>
        <title>Muhammad Sony Fauzi</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="mx-auto max-w-screen-2xl px-8">
        {showForm ? (
          <form onSubmit={handleSubmit} className="flex flex-col gap-4">
            <div className="mr-4 flex justify-end">
              <button
                onClick={() => setShowForm(false)}
                className="rounded bg-rose-400 px-4 py-2 text-rose-900 hover:bg-rose-400"
                disabled={loading}
              >
                Cancel Create
              </button>
            </div>
            <input
              type="text"
              placeholder="Product Name"
              value={name}
              onChange={(e) => setName(e.target.value)}
            />
            <input
              type="number"
              placeholder="Price"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
            />
            <input
              type="text"
              placeholder="Category"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
            />
            <textarea
              cols={3}
              placeholder="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
            <input
              type="file"
              multiple
              placeholder="Image"
              onChange={onChangeFile}
            />
            <section className="flex flex-row justify-between">
              {imgsSrc &&
                imgsSrc.map((link) => (
                  <picture key={link}>
                    <img
                      src={link}
                      alt="preview image"
                      className="h-[200px] w-[200px]"
                    />
                  </picture>
                ))}
            </section>
            <button type="submit">{loading ? "Loading..." : "Submit"}</button>
          </form>
        ) : (
          <div className="mr-4 flex justify-end pb-4">
            <button
              onClick={() => setShowForm(true)}
              className="rounded bg-green-400 px-4 py-2 text-green-900 hover:bg-green-400"
              disabled={loading}
            >
              Create
            </button>
          </div>
        )}

        <section>
          <table className="w-full">
            <thead className="border">
              <tr>
                <th className="border">No</th>
                <th className="border">Name</th>
                <th className="border">Price</th>
                <th className="border">Description</th>
                <th className="border">Image</th>
                <th className="border">Action</th>
              </tr>
            </thead>
            <tbody>
              {productAsset.data?.map((product, index) => (
                <tr key={product.id}>
                  <td className="border">{index + 1}</td>
                  <td className="border">{product.product_id.product_name}</td>
                  <td className="border">{product.product_id.price}</td>
                  <td className="border">{product.product_id.description}</td>
                  <td className="border">
                    {product.asset_id.map((asset) => (
                      <div key={asset.id} className="flex h-[100px] w-[100px]">
                        <picture>
                          <img
                            src={asset.path}
                            alt={asset.name}
                            className="flex-grow"
                          />
                        </picture>
                      </div>
                    ))}
                  </td>
                  <td className="border">
                    <div className="flex gap-4 px-2">
                      <button
                        className="rounded bg-blue-400 px-4 py-2 
                      text-blue-900 hover:bg-blue-400"
                        disabled={loading}
                      >
                        {loading ? "Loading..." : "Edit"}
                      </button>
                      <button
                        onClick={() => handleDelete(product.id)}
                        className="rounded bg-red-400 px-4 py-2 
                      text-red-900 hover:bg-red-400"
                        disabled={loading}
                      >
                        {loading ? "Loading..." : "Delete"}
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </section>
      </main>
    </>
  );
};

export default Home;
